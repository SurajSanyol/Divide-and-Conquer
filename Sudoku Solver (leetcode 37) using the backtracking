class Solution {
public:
   
   bool isSafe(int curr_row,int curr_col ,char value,vector<vector<char>>& board)
   {  
        // int n = board.size();
      // check row safety
       for(int i=0;i<9;i++)
       {
         if(board[curr_row][i]==value)
         {
            return false;
         }

        //check colummn safety
         if(board[i][curr_col]==value)
         {
          return false;
         }
       

          //check 3*3 matrix safety
         if(board[3*(curr_row/3)+(i/3)][3*(curr_col/3)+(i%3)]==value)
         {
             return false;
          }

       }
        

       return true;
   }


bool solve(vector<vector<char>>& board)
{
    int n = board.size();
     for(int i=0;i<n;i++)
     {
        for(int j=0;j<n;j++)
        {
            //check that place is empty or not 
             if(board[i][j]=='.')
             {
                for(char value='1';value<='9';value++)
                {
                    if(isSafe(i,j,value,board))
                    {
                        board[i][j]=value;
                        //  baki recursion solve krega
                         bool aageKaSolution = solve(board);
                          if(aageKaSolution)
                          {
                            return true;
                          }
                          else {
                              // backtracking
                                  board[i][j]='.';
                          }

                    }
                    
                }
             return false;
             }
        }
     }
     return true;
}
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
        
    }
};
