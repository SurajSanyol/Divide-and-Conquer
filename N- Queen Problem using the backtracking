#include <iostream>
#include<vector>
using namespace std;

void printSolution(vector<vector<char>>&board , int n)
{
  for(int i =0;i<n;i++)
  {
    for(int j=0;j<n;j++)
    {
      cout<<board[i][j]<<" ";
    }
    cout<<endl;
  }
  cout<<endl<<endl;
}

bool isSafe(int row, int col, vector<vector<char>>&board, int n)
{ 

   // left check kro
    int i = row;
    int j=col;
     // check kro 

     while(j>=0){
      if(board[i][j]=='Q')
      return false;
      j--;
     }

     // upper left  Diagonal check kro 
      i = row;
      j=col;

    while(i>=0 &&j>=0)
    {
      if(board[i][j]=='Q')
      return false;
      j--,i--;
    }

    // down left diagonal check kro

       i = row;
       j=col;

    while(i<n &&j>=0)
    {
       if(board[i][j]=='Q')
      return false;
      j--,i++;
    }

    return true;


}

void solve(vector<vector<char>>&board , int col , int n)
{
  // base case 
   if(col>=n)
   {
     printSolution(board, n);
     return;
   }

   // ek case solve

    for(int row=0;row<n;row++)
    {
       if(isSafe(row,col,board,n))
       {
         // rakh do 
          board[row][col]='Q';

          solve(board,col+1,n);

         // backtracking 
         board[row][col]='-';
       }
    }
     return;
}

int main() {
  //  cout << "Hello world!" << endl;
   int n= -10;
   if(n==0|| n<0 || n==2||n==3)
   {
    cout<<"Not place the Queen";
    return 0;
   }
   vector<vector<char>>board(n,vector<char>(n,'-'));
   int col=0;
   solve(board,col,n);
   return 0;
}
