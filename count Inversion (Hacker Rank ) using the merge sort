 long mergeArray(vector<int> &arr , vector<int> &temp,int start , int mid , int end)
  {
      int i = start, j=mid+1, k=start;
      long count =0;
      while(i<=mid && j <=end)
      {
          if(arr[i]<=arr[j])
          {
              temp[k++]=arr[i++];
          }
          else {
              temp[k++]=arr[j++];
              count += mid-i+1;
          }
      }
      
      while(i<=mid)
      {
           temp[k++]=arr[i++];
      }
      
      while(j<=end)
      {
           temp[k++]=arr[j++];
      }
      
      // // Copy elements from temp array back to original array
     for (int p = start; p <= end; ++p)
    {
        arr[p] = temp[p];
    }
       return count;
  }
  
  long mergeSort(vector<int> &arr , vector<int> &temp, int start, int end)
  {
      // base case
      if(start>=end)
      {
          return 0;
      }
      long count =0;
      int  mid = start + (end - start) / 2; 
       
        count +=  mergeSort(arr,temp,start,mid);
        count += mergeSort(arr,temp,mid+1,end);
        count += mergeArray(arr, temp, start, mid , end);
      return count;
  }

long countInversions(vector<int> arr) {
     
     long count = 0 ; // this is  inversion count
      vector<int>temp(arr.size() ,0);
      count = mergeSort(arr, temp, 0,arr.size()-1);
       
       return count;
}
