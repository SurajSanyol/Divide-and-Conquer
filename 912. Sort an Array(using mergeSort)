class Solution {
public:
       
       void mergeArray(vector<int>& nums,vector<int>& temp,int start, int mid,int end)
       {
            int i=start,j=mid+1,k=start;
            while(i<=mid && j<=end)
            {
                if(nums[i]<=nums[j])
                {
                    temp[k++]=nums[i++];
                }
                else
                {
                     temp[k++]=nums[j++];
                }
            }
             while(i<=mid)
             {
                temp[k++]=nums[i++];
             }

             while(j<=end)
             {
                temp[k++]=nums[j++];
             }

             /// copy into the nums array  from temp array
              for(int p =start;p<=end;p++)
              {
                nums[p]=temp[p];
              }

       }

    void mergeSort(vector<int>& nums,vector<int>& temp,int start,int end)
    {
        // base case 
        if(start>=end)
        {
            return;
        }
        int mid = (start+end)/2;
        mergeSort(nums,temp,start , mid);
        mergeSort(nums,temp,mid+1 , end);
        mergeArray(nums,temp,start,mid,end);
    }
     
    vector<int> sortArray(vector<int>& nums) {
        vector<int>temp(nums.size(),0);
          mergeSort(nums,temp,0,nums.size()-1);
         
         return nums;
    }
};
