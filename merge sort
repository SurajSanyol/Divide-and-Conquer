#include <iostream>
using namespace std;

void mergeArray(int *arr, int s, int e) {
  int mid = (s + e) / 2;

  int len1 = mid - s + 1;
  int len2 = e - mid;

  // dyanamic array declare
  int *left = new int[len1];
  int *right = new int[len2];

  // copy to the array
  int k = s;
  for (int i = 0; i < len1; i++) {
    left[i] = arr[k];
    k++;
  }

  k = mid + 1;
  for (int i = 0; i < len2; i++) {
    right[i] = arr[k];
    k++;
  }

  // merge to the array

  int leftIndex = 0;
  int rightIndex = 0;
  int mainArrIndex = s;

  while (leftIndex < len1 && rightIndex < len2) {
    if (left[leftIndex] < right[rightIndex]) {
      arr[mainArrIndex] = left[leftIndex];
      mainArrIndex++;
      leftIndex++;
    } else {
      arr[mainArrIndex] = right[rightIndex];
      mainArrIndex++;
      rightIndex++;
    }
  }

  while (leftIndex < len1) {
    arr[mainArrIndex] = left[leftIndex];
    leftIndex++;
    mainArrIndex++;
  }

  while (rightIndex < len2) {
    arr[mainArrIndex] = right[rightIndex];
    rightIndex++;
    mainArrIndex++;
  }

  delete[] left;
  delete[] right;
}

void mergeSort(int *arr, int s, int e) {
  // base case
  if (s >= e) {
    return;
  }

  // ek case solution
  int mid = (s + e) / 2;
  // left array sort
  mergeSort(arr, s, mid);

  // right array sort
  mergeSort(arr, mid + 1, e);

  // mergeArray
  mergeArray(arr, s, e);
}

int main() {
  cout << "Hello world!" << endl;

  int arr[5] = {24, 11, 4, 9, 3};
  int n = 5;
  int s = 0;
  int e = n - 1;
  mergeSort(arr, s, e);

  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  return 0;
}
